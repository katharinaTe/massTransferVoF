/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         CrankNicolson 0.2; // 1st order backward Euler time integration
    
    /*
    Most stable: Euler;
    		 CrankNicolson 0.9; // 0=Euler, 1=Pure CrankNicolson
    Most accurate: backward;
    --> Rule of thumb: Start with CrankNicolson 0.9, then drop number or change to backward
    */
}

gradSchemes
{
    default         leastSquares; // Gauss gradient scheme with linear interpolation
    /*
    Most stable: Gauss linear;

    Most accurate: leastSquares;
    // Add limiter for stability
    cellMDLimited Gauss linear 1.0;

    */
}

divSchemes // critical for accuracy and stability of simulation
{
    div(phirb,alpha) Gauss linear;
    div(phi,k)      Gauss linear;
    div(phi,epsilon) Gauss linear;
    div(phi,omega)  Gauss linear;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;

    div(phi,C)      Gauss linear;  // Advection term, Gauss: Volume to surface integrals
    div(phiCi,C)      Gauss linear;
    
    div(rhoPhi,U)   Gauss linear;
    div(phi,alpha)  Gauss linear;    

    /*
    Most stable: Gauss upwind;
    Average: Gauss limitedLinear 1.0;
    Note, the order isn't exact here: Gauss linearUpwind <gradScheme>; Gauss vanLeer; Gauss QUICK;
    Most accurate: Gauss linear;
    Steady state: bounded Gauss limitedLinear 1.0;

Rule of thumb
default none;
div(phi,U) Gauss limitedLinearV 1.0;
div(phi,k) Gauss limitedLinear 1.0;
div(phi,epsilon) Gauss limitedLinear 1.0;
div((nuEff*dev2(T(grad(U))))) Gauss linear; // viscosity term

    */
}

laplacianSchemes
{
    default         Gauss linear orthogonal; // Diffusion term
    // Gauss linear followed by what is in snGradSchemes
}

interpolationSchemes
{
    default         linear;
    // usually you don't need any other interpolation scheme
}

snGradSchemes
{
    default         orthogonal;
    /*
    Max non-ortho < 0.5 deg: orthogonal
    Max non-ortho < 5 deg: uncorrected
    Max non-ortho < 70 deg: corrected // additional non orthogonal correctors in fvSol needed
    Max non-ortho < 80 deg: limited corrected 0.5
    Max non-ortho > 80 deg: Make a better mesh
    */
}


// ************************************************************************* //
